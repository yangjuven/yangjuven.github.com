<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | On the road]]></title>
  <link href="http://yangjuven.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://yangjuven.github.com/"/>
  <updated>2014-08-22T22:39:53+08:00</updated>
  <id>http://yangjuven.github.com/</id>
  <author>
    <name><![CDATA[Yang Juven]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cPickle正则表达式对象]]></title>
    <link href="http://yangjuven.github.com/blog/2014/08/18/cpickle-regex-object/"/>
    <updated>2014-08-18T16:38:00+08:00</updated>
    <id>http://yangjuven.github.com/blog/2014/08/18/cpickle-regex-object</id>
    <content type="html"><![CDATA[<h4 id="section">背景</h4>

<p>在游戏中，如果玩家享受 VIP 网吧特权，除了经验加成外，还有一个 <strong>网吧称谓</strong> 的特权，就是在角色头上，显示 <strong>网吧名+昵称</strong> 。因此网吧名必须要做敏感词过滤以规避不必要的政策风险。从游戏那里拿到了371个正则表达式，如果网吧注册的时候，网吧名匹配上了任意一个，就为视为敏感词，不能通过。并且将这个敏感词检查通过 HTTP 来提供服务。</p>

<h4 id="section-1">问题</h4>

<p>在 python 中通过 <code>re.compile</code> 编译正则表达式是很耗时的，更不要说371个。统计了下，大概耗时18秒之多。将这个服务托管在 igor 上就不要想了，因为 igor 上每个请求有15s 的最长时间返回响应限制。如果托管在普通服务器上 nignx + uWSGI 环境中呢？第一个请求也因为要初始化，等待编译完这371个正则表达式后才能返回响应，耗时自然超过18秒。后面的请求由于正则表达式依然编译完，直接 <code>match</code> 返回响应还是很快的，十几毫秒以内搞定。</p>

<p>为了减少第一次请求的18秒长时间返回响应，避免客户端请求超时，昶公和我最初始的想法就是：这些正则表达式几乎不会变动，我们可以将正则表达式的编译结果 <code>cPickle.dumps</code> 序列化保存到文件中。待下次程序启动时直接从文件读取内容， <code>cPickle.loads</code> 反序列化成正则表达式对象，这样不就减少了编译正则表达式的时间吗？但是这样做好了后，反序列化成正则表达式对象，依然耗时了18秒多。一点好转的迹象都木有。这一切都是为什么呢？</p>

<h4 id="section-2">原因</h4>

<p>翻阅 cPickle 的 <a href="https://docs.python.org/2/library/pickle.html">官方文档</a> 不难发现，cPickle 仅仅能够能对以下对象进行序列化：</p>

<ol>
  <li>基础数据类型。
    <ul>
      <li>None, True, and False</li>
      <li>integers, long integers, floating point numbers, complex numbers</li>
      <li>normal and Unicode strings</li>
      <li>tuples, lists, sets, and dictionaries containing only picklable objects</li>
    </ul>
  </li>
  <li>定义在模块最高层的函数对象、类对象。大家一定疑问，为什么一定必须得定义在模块最高层？那是因为，对于函数对象、类对象，序列化保存的仅仅是命名引用 name reference，反序列化就是依据这些函数名、类名给 import 进来，为了保证反序列化的环境能够 import 成功就必须得 <strong>defined at the top level of a module</strong> 。
    <ul>
      <li>functions defined at the top level of a module</li>
      <li>built-in functions defined at the top level of a module</li>
      <li>classes that are defined at the top level of a module</li>
    </ul>
  </li>
  <li>实例对象。
    <ul>
      <li>instances of such classes whose __dict__ or the result of calling __getstate__() is picklable (see section The pickle protocol for details).</li>
    </ul>
  </li>
</ol>

<p><code>re.compile()</code> 得到的是 <code>_sre.SRE_Pattern</code> 对象实例，这个实例既没有 __dict__ ，也没有 __getstate__() ，由此可见采用的不是 <a href="https://docs.python.org/2/library/pickle.html#the-pickle-protocol">The pickle protocol</a> 的 <a href="https://docs.python.org/2/library/pickle.html#pickling-and-unpickling-normal-class-instances">Pickling and unpickling normal class instances</a> ，而是 <a href="https://docs.python.org/2/library/pickle.html#pickling-and-unpickling-extension-types">Pickling and unpickling extension types</a>。在序列化的时候，保存的是：</p>

<ol>
  <li>可 callable 对象</li>
  <li>传入 callable 对象的参数列表</li>
</ol>

<p>在反序列化的时候，只需将参数列表传入可 callable 对象进行 call，就得到原始对象。具体到 <code>_sre.SRE_Pattern</code> ：</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">_pickle</span>(p):
    <span class="keyword">return</span> _compile, (p.pattern, p.flags)
copy_reg.pickle(_pattern_type, _pickle, _compile)
</pre></td>
</tr></table>
</div>

<p>代码来自 <a href="http://hg.python.org/cpython/file/c9910fd022fc/#l285">python Lib/re.py Line 285</a> 。</p>

<p>而我们再看看 <code>re.compile</code> 的具体定义：</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">compile</span>(pattern, flags=<span class="integer">0</span>):
    <span class="string"><span class="delimiter">&quot;</span><span class="content">Compile a regular expression pattern, returning a pattern object.</span><span class="delimiter">&quot;</span></span>
    <span class="keyword">return</span> _compile(pattern, flags)
</pre></td>
</tr></table>
</div>

<p>代码来自 <a href="http://hg.python.org/cpython/file/c9910fd022fc/#l188">python Lib/re.py Line 188</a> 。</p>

<p>一模一样啊，有木有。也就是说 <code>_sre.SRE_Pattern</code> 对象的序列化，就是编译的函数 <code>re._compile</code> 和输入的参数 <code>pattern</code> ，<code>flags</code> 给保存起来，反序列化的时候 <code>_compile(pattern, flags)</code> 。这和直接 <code>re.compile</code> 有什么区别，这赤裸裸的是 <strong>伪序列化</strong> 啊，这是造成 <code>cPickle.loads</code> 依然耗时18秒多的真实原因，依然没有节省掉编译正则表达式的时间。知道真相的我眼泪掉下来。</p>

<h4 id="section-3">解决</h4>

<p>有木有其他方法来解决呢？鉴于 cPickle 对于基础数据类型是真真的序列号，再加上我阅读了 <a href="http://hg.python.org/cpython/file/c9910fd022fc/Lib/sre_compile.py#l501">python Lib/sre_compile.py compile</a></p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">compile</span>(p, flags=<span class="integer">0</span>):
    <span class="comment"># internal: convert pattern list to internal format</span>

    <span class="keyword">if</span> isstring(p):
        pattern = p
        p = sre_parse.parse(p, flags)
    <span class="keyword">else</span>:
        pattern = <span class="predefined-constant">None</span>

    code = _code(p, flags)

    <span class="comment"># print code</span>

    <span class="comment"># XXX: &lt;fl&gt; get rid of this limitation!</span>
    <span class="keyword">if</span> p.pattern.groups &gt; <span class="integer">100</span>:
        <span class="keyword">raise</span> <span class="exception">AssertionError</span>(
            <span class="string"><span class="delimiter">&quot;</span><span class="content">sorry, but this version only supports 100 named groups</span><span class="delimiter">&quot;</span></span>
            )

    <span class="comment"># map in either direction</span>
    groupindex = p.pattern.groupdict
    indexgroup = [<span class="predefined-constant">None</span>] * p.pattern.groups
    <span class="keyword">for</span> k, i <span class="keyword">in</span> groupindex.items():
        indexgroup[i] = k

    <span class="keyword">return</span> _sre.compile(
        pattern, flags | p.pattern.flags, code,
        p.pattern.groups-<span class="integer">1</span>,
        groupindex, indexgroup
        )
</pre></td>
</tr></table>
</div>

<p>由于真正耗时的操作在 <code>code = _code(p, flags)</code> 之前完成，而 code 是一个包含整型的列表，完全可以真真的序列化。因此，我们完整可以将 code 给 cPickle 保存起来。然后根据 code 反序列化再转换成 <code>_sre.SRE_Pattern</code> 对象。代码改写起来就很容易啦。</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
<a href="#n18" name="n18">18</a>
<a href="#n19" name="n19">19</a>
<strong><a href="#n20" name="n20">20</a></strong>
<a href="#n21" name="n21">21</a>
<a href="#n22" name="n22">22</a>
<a href="#n23" name="n23">23</a>
<a href="#n24" name="n24">24</a>
<a href="#n25" name="n25">25</a>
<a href="#n26" name="n26">26</a>
<a href="#n27" name="n27">27</a>
<a href="#n28" name="n28">28</a>
<a href="#n29" name="n29">29</a>
<strong><a href="#n30" name="n30">30</a></strong>
<a href="#n31" name="n31">31</a>
<a href="#n32" name="n32">32</a>
<a href="#n33" name="n33">33</a>
<a href="#n34" name="n34">34</a>
<a href="#n35" name="n35">35</a>
<a href="#n36" name="n36">36</a>
<a href="#n37" name="n37">37</a>
<a href="#n38" name="n38">38</a>
<a href="#n39" name="n39">39</a>
<strong><a href="#n40" name="n40">40</a></strong>
<a href="#n41" name="n41">41</a>
<a href="#n42" name="n42">42</a>
<a href="#n43" name="n43">43</a>
<a href="#n44" name="n44">44</a>
<a href="#n45" name="n45">45</a>
<a href="#n46" name="n46">46</a>
<a href="#n47" name="n47">47</a>
<a href="#n48" name="n48">48</a>
<a href="#n49" name="n49">49</a>
<strong><a href="#n50" name="n50">50</a></strong>
</pre></td>
  <td class="code"><pre><span class="keyword">import</span> <span class="include">cPickle</span>, <span class="include">re</span>, <span class="include">sre_compile</span>, <span class="include">sre_parse</span>, <span class="include">_sre</span>

<span class="comment"># the first half of sre_compile.compile</span>
<span class="keyword">def</span> <span class="function">raw_compile</span>(p, flags=<span class="integer">0</span>):
    <span class="comment"># internal: convert pattern list to internal format</span>

    <span class="keyword">if</span> sre_compile.isstring(p):
        pattern = p
        p = sre_parse.parse(p, flags)
    <span class="keyword">else</span>:
        pattern = <span class="predefined-constant">None</span>

    code = sre_compile._code(p, flags)

    <span class="keyword">return</span> p, code

<span class="comment"># the second half of sre_compile.compile</span>
<span class="keyword">def</span> <span class="function">build_compiled</span>(pattern, p, flags, code):
    <span class="comment"># print code</span>

    <span class="comment"># XXX: &lt;fl&gt; get rid of this limitation!</span>
    <span class="keyword">if</span> p.pattern.groups &gt; <span class="integer">100</span>:
        <span class="keyword">raise</span> <span class="exception">AssertionError</span>(
            <span class="string"><span class="delimiter">&quot;</span><span class="content">sorry, but this version only supports 100 named groups</span><span class="delimiter">&quot;</span></span>
            )

    <span class="comment"># map in either direction</span>
    groupindex = p.pattern.groupdict
    indexgroup = [<span class="predefined-constant">None</span>] * p.pattern.groups
    <span class="keyword">for</span> k, i <span class="keyword">in</span> groupindex.items():
        indexgroup[i] = k

    <span class="keyword">return</span> _sre.compile(
        pattern, flags | p.pattern.flags, code,
        p.pattern.groups-<span class="integer">1</span>,
        groupindex, indexgroup
        )

<span class="keyword">def</span> <span class="function">dumps</span>(regexes):
    picklable = []
    <span class="keyword">for</span> r <span class="keyword">in</span> regexes:
        p, code = raw_compile(r, re.DOTALL)
        picklable.append((r, p, code))
    <span class="keyword">return</span> cPickle.dumps(picklable)

<span class="keyword">def</span> <span class="function">loads</span>(pkl):
    regexes = []
    <span class="keyword">for</span> r, p, code <span class="keyword">in</span> cPickle.loads(pkl):
        regexes.append(build_compiled(r, p, re.DOTALL, code))
    <span class="keyword">return</span> regexes
</pre></td>
</tr></table>
</div>

<p>将原来的 compile 一拆为二 <code>raw_compile</code> 和 <code>build_compiled</code> ：</p>

<ul>
  <li>序列化的时候，通过 <code>raw_compile</code> 将中间态 code 给序列化保存起来。</li>
  <li>反序列化的时候，反序列化得到 code ，将 code 传给 <code>build_compiled</code> 得到 <code>_sre.SRE_Pattern</code> 对象。</li>
</ul>

<p>这样就完美解决了序列化了正则表达式对象的问题，节省了编译的时间。</p>

<h4 id="section-4">总结</h4>

<p>通过以上方法后，改善是相当大。以前 <code>time wsgi_handler.py</code> 是：</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>real    0m18.532s
user    0m17.621s
sys     0m0.432s
</pre></td>
</tr></table>
</div>

<p>改善后， <code>time wsgi_handler.py</code> 是：</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
</pre></td>
  <td class="code"><pre>real    0m0.731s
user    0m0.568s
sys     0m0.160s
</pre></td>
</tr></table>
</div>

<p>改善效果相当明显，客户端调用再也不会超时了。不过这个方法不具有普适性，因为我是阅读了源码，对于源码中的大量非公开 API 进行了调用，如果源码进行了改动，这里的方法就失灵啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python yield分享]]></title>
    <link href="http://yangjuven.github.com/blog/2011/07/01/python-yield/"/>
    <updated>2011-07-01T00:00:00+08:00</updated>
    <id>http://yangjuven.github.com/blog/2011/07/01/python-yield</id>
    <content type="html"><![CDATA[<p>前不久在组内分享了《python yield》，反响很不错，现在放出幻灯片
&lt;div style="width:425px" id="__ss_8477786"&gt; <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/yangjuven/python-yield" title="Python Yield" target="_blank">Python Yield</a></strong> &lt;iframe src="http://www.slideshare.net/slideshow/embed_code/8477786" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"&gt;&lt;/iframe&gt; &lt;div style="padding:5px 0 12px"&gt; View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/yangjuven" target="_blank">yangjuven</a> &lt;/div&gt; &lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking in yield]]></title>
    <link href="http://yangjuven.github.com/blog/2010/12/20/thinking-in-yield/"/>
    <updated>2010-12-20T00:00:00+08:00</updated>
    <id>http://yangjuven.github.com/blog/2010/12/20/thinking-in-yield</id>
    <content type="html"><![CDATA[<p>yield作为python的一个关键字，如果在函数体使用，那么这个调用这个函数返回一个“生成迭代器”(generator
iterator)，当然在平时都称呼为“生成器”。
为了更深入的了解生成器，还是先介绍下生成器有的特性和特点吧：</p>

<ul>
  <li>可以迭代（恩，这个特性是废话，从名字都可以看出来，但是这的确是生成器最基本的一个特性）</li>
  <li>通过调用next函数或者send函数（其实next() = send(None)
），会执行到yield语句，就会被冻结，冻结后就返回它的caller；直至调用下次send函数从上次冻结点接着执行</li>
  <li>当生成器对象引用计数为0被回收时，如果发现生成器对象仍然被冻结，就会调用close函数，close函数的作用就是抛出一个GeneratorExit的异常</li>
  <li>生成器只能被迭代一次（有点惊讶？我看源码的时候，发现这个的时候也有点）</li>
</ul>

<p>那generator是如何实现的呢？看了源码其实很简单，在初始化一个生成器对象，都需要一个参数:
PyFrameObject *
f。这个f就是生成器函数的栈帧，当函数被冻结时，记录这个栈帧的栈点stacktop
以及虚拟机字节码位置f_lasti。下次执行的时候直接从这个字节码位置和栈点执行。一切很简单吧！
一切谜底都要从python源码Python/ceval.c中的PyEval_EvalFrameEx开始，初始化代码：</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
</pre></td>
  <td class="code"><pre>    /* An explanation <span class="keyword">is</span> <span class="keyword">in</span> order <span class="keyword">for</span> the <span class="predefined">next</span> line.

       f-&gt;f_lasti now refers to the index of the last instruction
       executed.  You might think this was obvious <span class="keyword">from</span> <span class="include">the</span> <span class="include">name</span>, <span class="include">but</span>
       this wasn<span class="string"><span class="delimiter">'</span><span class="content">t always true before 2.3!  PyFrame_New now sets</span></span>
       f-&gt;f_lasti to -<span class="integer">1</span> (i.e. the index *before* the first instruction)
       <span class="keyword">and</span> YIELD_VALUE doesn<span class="string"><span class="delimiter">'</span><span class="content">t fiddle with f_lasti any more.  So this</span></span>
       does work.  Promise. */
    next_instr = first_instr + f-&gt;f_lasti + <span class="integer">1</span>;
    stack_pointer = f-&gt;f_stacktop;
    <span class="keyword">assert</span>(stack_pointer != NULL);
    f-&gt;f_stacktop = NULL;   /* remains NULL unless <span class="keyword">yield</span> suspends frame */
</pre></td>
</tr></table>
</div>

<p>那yield或者说生成器都有哪些应用呢：</p>

<ul>
  <li>生成迭代器(靠，又是废话)</li>
  <li>与with_statement结合使用</li>
  <li>著名的”Trampoline in python”</li>
  <li>轻量级任务</li>
  <li>其他……</li>
</ul>

<p>Resouces &amp; References:</p>

<ul>
  <li><a href="http://www.python.org/dev/peps/pep-0342/">The yield statement</a></li>
  <li><a href="http://www.python.org/dev/peps/pep-0342/">Coroutines via Enhanced Generators</a></li>
  <li><a href="http://www.python.org/dev/peps/pep-0343/">The with statement</a></li>
  <li><a href="http://knol.google.com/k/davy-wybiral/trampolining-in-python/23oi5sywhe2tp/2">Tramoplining in
python</a>(这个地方请看评论，我觉得评论比文章更为精彩)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyListObject与PyDictObject]]></title>
    <link href="http://yangjuven.github.com/blog/2010/10/19/pylistobject-and-pydictobject/"/>
    <updated>2010-10-19T00:00:00+08:00</updated>
    <id>http://yangjuven.github.com/blog/2010/10/19/pylistobject-and-pydictobject</id>
    <content type="html"><![CDATA[<p>昨天又接着阅读了PyListObject和PyDictObject两个内建对象的实现。其实在明白了python对象机制，阅读起着两个内建对象，的确简单了很多。其实我认为PyListObject和PyDictObject还是有很多相似之处的。</p>
<p>首先，PyListObject和PyDictObject的缓存池机制是一样的。都有对应的缓存池num_free_lists或者num_free_dicts，刚刚初始化的时候都是为空的数组(PyListObject * 或者PyDictObject *)，却在对象销毁的时候，招兵买马。</p>
<p>其次，这两个对象保存基本数据的结构，都是一个数组。PyListObject的是ob_item(各个元素是PyObject *)，PyDictObject是ma_smalltable(各个元素是PyDictEntry)。为什么都是数组，而不是链表？都是为了随机访问的时候访问，试想如果ob_item是个链表，那么l[2]如何迅速查询到，遍历链表是何等的慢。但是采用数组，在PyListObject插入或者删除的时候就麻烦了，大量的内存申请或者搬运工作。PyDictObject的ma_smalltable更不用说了，通过hash值以及探测函数，迅速搜索，那是dict的特性之一。</p>
<p>最后，这两个对象在初始化的时候，申请内存的时候，并不是用多少申请多少，而是在节省内存的前提下，多申请了一些，都是让内存管理更加高效。但是具体细节又有不同。</p>
<p>BTW，PyDictObject搜索的实现，完全是大学课程《数据结构》的那一套，有空复习下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python源码初探]]></title>
    <link href="http://yangjuven.github.com/blog/2010/10/17/python-source-code/"/>
    <updated>2010-10-17T00:00:00+08:00</updated>
    <id>http://yangjuven.github.com/blog/2010/10/17/python-source-code</id>
    <content type="html"><![CDATA[<p>在阅读完《Apanche源代码全景分析》前6章后，对Apache体系结构以及模块开发有了比较深的认识，也开发了一个比较简单的Module(实现pv统计，用memcached保存page
count，<a href="http://github.com/yangjuven/mod_pv_count">源代码链接</a>)，最近开始了新的阅读《python源码剖析》。在阅读完前3章(python对象初探，PyIntObject，PyStringObject)，终于揭开python神秘的面纱，拉近我和python之间的距离。</p>

<p>python中一切皆对象，而对象机制的基石便是PyObject</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
</pre></td>
  <td class="code"><pre>typedef struct _object {
    <span class="predefined">int</span> ob_refcnt;
    struct _typeobject *ob_type;
}PyObject;
</pre></td>
</tr></table>
</div>

<p>ob_refcnt便是引用计数，ob_type便是类型信息。那么其他对象都可以在此基础上扩展，添加自身的信息，比如</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
</pre></td>
  <td class="code"><pre>typedef struct _object {
     <span class="predefined">int</span> ob_refcnt;
     struct _typeobject *ob_type;
     <span class="predefined">long</span> ob_ival;
}PyIntObject;
</pre></td>
</tr></table>
</div>

<p>当时阅读到这里，最疑惑的是python中的类型对象和实例对象都是怎么实现？stuct
PyTypeObject的一个实例PyType_Type便是类型对象的基础，所有类型对象的ob_type都是指向PyType_Type，包括PyType_type本身，也就是说下面的表达式是成立的：</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>PyType_Type-&gt;ob_type == &amp;PyType_Type
</pre></td>
</tr></table>
</div>

<p>一切很简单，比如</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers"><pre><a href="#n1" name="n1">1</a>
</pre></td>
  <td class="code"><pre>a = <span class="integer">1</span>
</pre></td>
</tr></table>
</div>

<p>a是一个int类型，a便是struct
PyIntObject数据，int便是PyInt_Type(PyInt_type并不是一个struct，也是一个struct
PyTypeObject数据)。这便是python中“一切皆对象”的完美实现。</p>

<p>另外，还有几点说明，需要警惕下：</p>

<ul>
  <li>在python的各种对象中，类型对象时超越引用计数的。类型对象“跳出三界外，不在五行中”，永远不会被析构。每个对象中指向类型对象的指针不会被视为类型对象的引用，就是说每个对象建立初始化化，并不会对类型对象的引用计数加一；销毁时并不会减一。估计类型对象的引用计数永远是1了。</li>
  <li>在python中，PyIntObject和PyStringObject都引用了内存对象池，因为对于这些用经常频繁用到的数据，会有大量的时间浪费是内存的申请和销毁上(如果不适用内存对象池的话)。PyIntObject不仅使用了小整数对象池(范围从NSMALLNEGINTS到NSAMLLPOSINTS)，还有专门的PyIntBlock来用于申请大整数对象。因此对于一个整数，在NSAMLLNEGINTS和NSMALLPOSINTS之间，如果数值相等，其id便是相等，但是其他的id就不同了。PyStringObject也有字符串内存池，对于size为0或者1的字符串，都会经过intern机制缓存起来，其id肯定相同，但是大于1的就不一定了，这个或许跟创建PyStrngObject采用的方法有关吧，有可能是PySting_FromString，PyString_InternInPlace，也有可能是PyString_InternFromString。</li>
  <li>关于PyStringObject的一个效率问题。对于N个字符串的连接，如果采用直接相加的话，调用string_concat，就会有N-1的内存申请以及内存搬运工作。但是如果采用”“.join([a, b, ..]的话，调用string_join，在开始时会一次性计算好内存，然后申请内存，将字符串拼接，生成PyStringObject即可。</li>
</ul>

]]></content>
  </entry>
  
</feed>
